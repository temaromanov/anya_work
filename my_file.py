
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from tkcalendar import DateEntry
import pandas as pd
import os
from docx import Document

class ExcelEntryApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤")
        self.root.geometry("750x600")
        self.entries = {}
        self.excel_file = None
        self.word_template = "–®–∞–±–ª–æ–Ω_–¥–æ–≥–æ–≤–æ—Ä–∞.docx"

        # –í–∫–ª–∞–¥–∫–∏
        notebook = ttk.Notebook(root)
        notebook.pack(expand=True, fill='both', padx=10, pady=10)

        self.frames = {
            "–û—Å–Ω–æ–≤–Ω–æ–µ": ttk.Frame(notebook),
            "–ë–∞–Ω–∫ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã": ttk.Frame(notebook),
            "–î–∞—Ç—ã –∏ –Ω–æ–º–µ—Ä": ttk.Frame(notebook)
        }

        for name, frame in self.frames.items():
            notebook.add(frame, text=name)

        self.fields_main = [
            "–ü–æ–ª–Ω–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ", "–§–ò–û_—Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π", "–§–ò–û_—Å–æ–∫—Ä–∞—â",
            "–ø–æ–ª–Ω—ã–π_—Ç–∏–ø_–æ–±—ä–µ–∫—Ç–∞", "–ö–æ—Ä–æ—Ç–∫–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ",
            "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π_–∞–¥—Ä–µ—Å", "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π_–∞–¥—Ä–µ—Å"
        ]
        self.fields_bank = [
            "–ò–ù–ù", "–û–ì–†–ù", "–ö–ü–ü", "–ë–∞–Ω–∫", "–ö–æ—Ä_—Å—á–µ—Ç", "–ë–ò–ö", "–û–ö–ü–û", "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è_–ø–µ—Ä—Å–æ–Ω–∞"
        ]
        self.fields_date = [
            "–ù–æ–º–µ—Ä", "–î–∞—Ç–∞_–∞—Ä–µ–Ω–¥—ã", "–î–∞—Ç–∞"
        ]
        bank_options = ["–ü–ê–û –°–ë–ï–†–ë–ê–ù–ö", "–í–¢–ë", "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫", "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫", "–¢–∏–Ω—å–∫–æ—Ñ—Ñ"]
        person_options = ["–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä", "–ü–æ–º–æ—â–Ω–∏–∫", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"]

        for field in self.fields_main:
            self.create_entry(self.frames["–û—Å–Ω–æ–≤–Ω–æ–µ"], field)

        for field in self.fields_bank:
            if field == "–ë–∞–Ω–∫":
                self.create_combobox(self.frames["–ë–∞–Ω–∫ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã"], field, bank_options)
            elif field == "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è_–ø–µ—Ä—Å–æ–Ω–∞":
                self.create_combobox(self.frames["–ë–∞–Ω–∫ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã"], field, person_options)
            else:
                self.create_entry(self.frames["–ë–∞–Ω–∫ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã"], field)

        for field in self.fields_date:
            if "–î–∞—Ç–∞" in field:
                self.create_dateentry(self.frames["–î–∞—Ç—ã –∏ –Ω–æ–º–µ—Ä"], field)
            else:
                self.create_entry(self.frames["–î–∞—Ç—ã –∏ –Ω–æ–º–µ—Ä"], field)

        button_frame = ttk.Frame(root)
        button_frame.pack(pady=10)

        ttk.Button(button_frame, text="üìÇ –í—ã–±—Ä–∞—Ç—å Excel-—Ñ–∞–π–ª", command=self.choose_file).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...", command=self.save_as).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å Word", command=self.save_and_generate_word).pack(side=tk.LEFT, padx=5)

    def create_entry(self, parent, field):
        label = ttk.Label(parent, text=field.replace("_", " "))
        label.pack(anchor='w', padx=10)
        entry = ttk.Entry(parent, width=85)
        entry.pack(padx=10, pady=3)
        self.entries[field] = entry

    def create_combobox(self, parent, field, options):
        label = ttk.Label(parent, text=field.replace("_", " "))
        label.pack(anchor='w', padx=10)
        combo = ttk.Combobox(parent, values=options, width=83)
        combo.pack(padx=10, pady=3)
        self.entries[field] = combo

    def create_dateentry(self, parent, field):
        label = ttk.Label(parent, text=field.replace("_", " "))
        label.pack(anchor='w', padx=10)
        date_entry = DateEntry(parent, width=83, date_pattern="dd.mm.yyyy")
        date_entry.pack(padx=10, pady=3)
        self.entries[field] = date_entry

    def choose_file(self):
        path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
        if path:
            self.excel_file = path

    def save_as(self):
        path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
        if path:
            self.excel_file = path

    def save_and_generate_word(self):
        if not self.excel_file:
            messagebox.showwarning("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ Excel-—Ñ–∞–π–ª –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.")
            return

        new_data = {k: v.get() for k, v in self.entries.items()}
        new_row = pd.DataFrame([new_data])

        if os.path.exists(self.excel_file):
            try:
                df = pd.read_excel(self.excel_file)
                df = pd.concat([df, new_row], ignore_index=True)
            except:
                df = new_row
        else:
            df = new_row

        df.to_excel(self.excel_file, index=False)

        if os.path.exists(self.word_template):
            doc = Document(self.word_template)
            for p in doc.paragraphs:
                for key, val in new_data.items():
                    if f"{{{{{key}}}}}" in p.text:
                        p.text = p.text.replace(f"{{{{{key}}}}}", val)

            word_output = self.excel_file.replace(".xlsx", "_–¥–æ–∫—É–º–µ–Ω—Ç.docx")
            doc.save(word_output)
            os.startfile(word_output)

        for entry in self.entries.values():
            entry.delete(0, tk.END)

if __name__ == "__main__":
    root = tk.Tk()
    app = ExcelEntryApp(root)
    root.mainloop()
