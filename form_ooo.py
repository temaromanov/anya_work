import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from tkcalendar import DateEntry
import pandas as pd
import os
from docx import Document
import pymorphy3
from num2words import num2words

morph = pymorphy3.MorphAnalyzer()

def fio_to_rod_and_short(fio_nominative):
    parts = fio_nominative.strip().split()
    if len(parts) < 3:
        return fio_nominative, fio_nominative
    fam, name, otch = parts
    fam_rod = morph.parse(fam)[0].inflect({'gent'}).word.title()
    name_rod = morph.parse(name)[0].inflect({'gent'}).word.title()
    otch_rod = morph.parse(otch)[0].inflect({'gent'}).word.title()
    fio_rod = f"{fam_rod} {name_rod} {otch_rod}"
    fio_short = f"{fam} {name[0]}.{otch[0]}."
    return fio_rod, fio_short

def rub_to_words(rub):
    rub = int(rub)
    rub_text = num2words(rub, lang="ru")
    return f"({rub_text})"

# ---------- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã –ø–æ –≤—Å–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É -------------
def replace_variables_in_doc(doc, replacements):
    for paragraph in doc.paragraphs:
        inline_replace_in_runs(paragraph.runs, replacements)
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for paragraph in cell.paragraphs:
                    inline_replace_in_runs(paragraph.runs, replacements)

def inline_replace_in_runs(runs, replacements):
    full_text = "".join([run.text for run in runs])
    for key, value in replacements.items():
        full_text = full_text.replace(f"{{{{{key}}}}}", str(value))
    # –ù–∞—Ä–µ–∑–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø–æ –¥–ª–∏–Ω–∞–º runs:
    idx = 0
    for run in runs:
        run_len = len(run.text)
        run.text = full_text[idx:idx+run_len]
        idx += run_len

# ---------------------- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å ----------------------------------
class ExcelEntryAppOOO:
    def __init__(self, root):
        self.root = root
        self.root.title("–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ (–û–û–û)")
        self.root.geometry("760x640")
        self.entries = {}
        self.excel_file = None
        self.word_template = "–®–∞–±–ª–æ–Ω_–∞—Ä–µ–Ω–¥–∞_–¥–æ–≥–æ–≤–æ—Ä_–æ–æ–æ.docx"

        style = ttk.Style()
        style.configure("TNotebook.Tab", font=("Segoe UI", 10, "bold"))
        style.configure("TLabel", font=("Segoe UI", 10))
        style.configure("TButton", font=("Segoe UI", 10))

        notebook = ttk.Notebook(root)
        notebook.pack(expand=True, fill='both', padx=12, pady=12)

        self.frames = {
            "–û—Å–Ω–æ–≤–Ω–æ–µ": ttk.Frame(notebook, padding=10),
            "–ë–∞–Ω–∫ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã": ttk.Frame(notebook, padding=10),
            "–î–∞—Ç—ã –∏ –Ω–æ–º–µ—Ä": ttk.Frame(notebook, padding=10)
        }

        for name, frame in self.frames.items():
            notebook.add(frame, text=name)

        self.fields_main = [
            "–§–ò–û_–∏–º",
            "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
            "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π_–∞–¥—Ä–µ—Å", "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π_–∞–¥—Ä–µ—Å", "–ù–æ–º–µ—Ä_–¥–æ–≥–æ–≤–æ—Ä–∞",
            "–ù–∞–∑–≤–∞–Ω–∏–µ_–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "–°—É–º–º–∞_–∞—Ä–µ–Ω–¥–Ω–æ–π_–ø–ª–∞—Ç—ã"
        ]
        self.fields_bank = [
            "–ò–ù–ù", "–ö–ü–ü", "–û–ö–ü–û", "–û–ì–†–ù", "–†–∞—Å—á_—Å—á–µ—Ç", "–ë–∞–Ω–∫", "–ë–ò–ö", "–∫_—Å—á–µ—Ç"
        ]
        self.fields_date = [
            "–î–∞—Ç–∞_–Ω–∞—á–∞–ª–∞_–∞—Ä–µ–Ω–¥—ã", "–î–∞—Ç–∞_–æ–∫–æ–Ω—á–∞–Ω–∏—è_–∞—Ä–µ–Ω–¥—ã", "–î–∞—Ç–∞"
        ]
        bank_options = ["–ü–ê–û –°–ë–ï–†–ë–ê–ù–ö", "–í–¢–ë", "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫", "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫", "–¢–∏–Ω—å–∫–æ—Ñ—Ñ"]
        person_options = ["–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä", "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç", "–î–∏—Ä–µ–∫—Ç–æ—Ä"]

        self.nds_label = None

        for field in self.fields_main:
            if field == "–§–ò–û_–∏–º":
                self.create_row(self.frames["–û—Å–Ω–æ–≤–Ω–æ–µ"], field, "–§–ò–û")
            elif field == "–î–æ–ª–∂–Ω–æ—Å—Ç—å":
                self.create_combobox(self.frames["–û—Å–Ω–æ–≤–Ω–æ–µ"], field, person_options)
            elif field == "–°—É–º–º–∞_–∞—Ä–µ–Ω–¥–Ω–æ–π_–ø–ª–∞—Ç—ã":
                self.create_row(self.frames["–û—Å–Ω–æ–≤–Ω–æ–µ"], field)
                self.nds_label = ttk.Label(self.frames["–û—Å–Ω–æ–≤–Ω–æ–µ"], text="–ù–î–° (5%): 0.00", font=("Segoe UI", 10, "bold"), foreground="#225500")
                self.nds_label.pack(anchor="w", padx=10, pady=2)
                self.entries[field].bind("<KeyRelease>", self.update_nds)
            else:
                self.create_row(self.frames["–û—Å–Ω–æ–≤–Ω–æ–µ"], field)

        for field in self.fields_bank:
            if field == "–ë–∞–Ω–∫":
                self.create_combobox(self.frames["–ë–∞–Ω–∫ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã"], field, bank_options)
            elif field == "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è_–ø–µ—Ä—Å–æ–Ω–∞":
                self.create_combobox(self.frames["–ë–∞–Ω–∫ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã"], field, person_options)
            else:
                self.create_row(self.frames["–ë–∞–Ω–∫ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã"], field)

        for field in self.fields_date:
            if "–î–∞—Ç–∞" in field:
                self.create_dateentry(self.frames["–î–∞—Ç—ã –∏ –Ω–æ–º–µ—Ä"], field)
            else:
                self.create_row(self.frames["–î–∞—Ç—ã –∏ –Ω–æ–º–µ—Ä"], field)

        button_frame = ttk.Frame(root)
        button_frame.pack(pady=15)

        ttk.Button(button_frame, text="üìÇ –í—ã–±—Ä–∞—Ç—å Excel-—Ñ–∞–π–ª", command=self.choose_file).pack(side=tk.LEFT, padx=8)
        ttk.Button(button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...", command=self.save_as).pack(side=tk.LEFT, padx=8)
        ttk.Button(button_frame, text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å Word", command=self.save_and_generate_word).pack(side=tk.LEFT, padx=8)

    def create_row(self, parent, field, label_text=None):
        frame = ttk.Frame(parent)
        frame.pack(fill='x', pady=3)
        label = ttk.Label(frame, text=label_text or field.replace("_", " "), width=40, anchor='w')
        label.pack(side='left')
        entry = ttk.Entry(frame, width=55)
        entry.pack(side='left', padx=5)
        self.entries[field] = entry

    def create_combobox(self, parent, field, options):
        frame = ttk.Frame(parent)
        frame.pack(fill='x', pady=3)
        label = ttk.Label(frame, text=field.replace("_", " "), width=25, anchor='w')
        label.pack(side='left')
        combo = ttk.Combobox(frame, values=options, width=63)
        combo.pack(side='left', padx=5)
        self.entries[field] = combo

    def create_dateentry(self, parent, field):
        frame = ttk.Frame(parent)
        frame.pack(fill='x', pady=3)
        label = ttk.Label(frame, text=field.replace("_", " "), width=25, anchor='w')
        label.pack(side='left')
        date_entry = DateEntry(frame, width=61, date_pattern="dd.mm.yyyy")
        date_entry.pack(side='left', padx=5)
        self.entries[field] = date_entry

    def choose_file(self):
        path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
        if path:
            self.excel_file = path

    def save_as(self):
        path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
        if path:
            self.excel_file = path

    def update_nds(self, event=None):
        try:
            summa = float(self.entries["–°—É–º–º–∞_–∞—Ä–µ–Ω–¥–Ω–æ–π_–ø–ª–∞—Ç—ã"].get().replace(",", "."))
            nds = round(summa * 5 / 105, 2)
            self.nds_label.config(text=f"–ù–î–° (5%): {nds:.2f}")
        except Exception:
            self.nds_label.config(text="–ù–î–° (5%): 0.00")

    def save_and_generate_word(self):
        if not self.excel_file:
            messagebox.showwarning("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ Excel-—Ñ–∞–π–ª –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.")
            return

        fio_input = self.entries["–§–ò–û_–∏–º"].get()
        fio_rod, fio_short = fio_to_rod_and_short(fio_input)

        new_data = {k: v.get() for k, v in self.entries.items()}
        new_data["–ü–æ–ª–Ω–æ–µ_–∏–º—è_—Ä–æ–¥_–ø–∞–¥–µ–∂"] = fio_rod
        new_data["–°–æ–∫—Ä—â_–∏–º—è_–¥–∏—Ä"] = fio_short

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã ‚Äî —Ç–µ–ø–µ—Ä—å –Ω–∞–¥—ë–∂–Ω–æ
        summa_str = new_data.get("–°—É–º–º–∞_–∞—Ä–µ–Ω–¥–Ω–æ–π_–ø–ª–∞—Ç—ã", "0").replace(",", ".")
        if summa_str.strip() == "":
            summa_str = "0"
        try:
            summa_float = float(summa_str)
        except Exception:
            summa_float = 0

        rub, sep, kop = summa_str.partition(".")
        if not sep:
            rub, kop = rub, "00"
        else:
            kop = (kop + "00")[:2]
        new_data["–°—É–º–º–∞_–∞—Ä–µ–Ω–¥–Ω–æ–π_–ø–ª–∞—Ç—ã_—Ä—É–±"] = rub if rub else "0"
        new_data["–°—É–º–º–∞_–∞—Ä–µ–Ω–¥–Ω–æ–π_–ø–ª–∞—Ç—ã_–∫–æ–ø"] = kop if kop else "00"
        new_data["–°—É–º–º–∞_–∞—Ä–µ–Ω–¥–Ω–æ–π_–ø–ª–∞—Ç—ã_–ø—Ä–æ–ø–∏—Å—å—é"] = rub_to_words(rub if rub else "0")

        nds = round(summa_float * 5 / 105, 2) if summa_float else 0
        new_data["–ù–î–°"] = f"{nds:.2f}"

        new_row = pd.DataFrame([new_data])

        if os.path.exists(self.excel_file):
            try:
                df = pd.read_excel(self.excel_file)
                df = pd.concat([df, new_row], ignore_index=True)
            except:
                df = new_row
        else:
            df = new_row

        try:
            df.to_excel(self.excel_file, index=False)
        except PermissionError:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –∑–∞–Ω—è—Ç ‚Äî –∑–∞–∫—Ä–æ–π –µ–≥–æ –≤ Excel:\n{self.excel_file}")
            return

        # --- –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –ó–ê–ú–ï–ù–ê –í WORD ---
        if os.path.exists(self.word_template):
            doc = Document(self.word_template)
            replace_variables_in_doc(doc, new_data)
            word_output = self.excel_file.replace(".xlsx", "_–¥–æ–∫—É–º–µ–Ω—Ç.docx")
            doc.save(word_output)
            os.startfile(word_output)

        for entry in self.entries.values():
            entry.delete(0, tk.END)
        self.update_nds()
