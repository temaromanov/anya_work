import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from tkcalendar import DateEntry
import pandas as pd
import os
from docx import Document
import pymorphy3

morph = pymorphy3.MorphAnalyzer()

def fio_to_rod_and_short(fio_nominative):
    parts = fio_nominative.strip().split()
    if len(parts) < 3:
        return fio_nominative, fio_nominative
    fam, name, otch = parts
    fam_rod = morph.parse(fam)[0].inflect({'gent'}).word.title()
    name_rod = morph.parse(name)[0].inflect({'gent'}).word.title()
    otch_rod = morph.parse(otch)[0].inflect({'gent'}).word.title()
    fio_rod = f"{fam_rod} {name_rod} {otch_rod}"
    fio_short = f"{fam} {name[0]}.{otch[0]}."
    return fio_rod, fio_short

class ExcelEntryAppOOO:
    def __init__(self, root):
        self.root = root
        self.root.title("–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ (–û–û–û)")
        self.root.geometry("760x640")
        self.entries = {}
        self.excel_file = None
        self.word_template = "–®–∞–±–ª–æ–Ω_–∞—Ä–µ–Ω–¥–∞_–¥–æ–≥–æ–≤–æ—Ä_–æ–æ–æ.docx"

        style = ttk.Style()
        style.configure("TNotebook.Tab", font=("Segoe UI", 10, "bold"))
        style.configure("TLabel", font=("Segoe UI", 10))
        style.configure("TButton", font=("Segoe UI", 10))

        notebook = ttk.Notebook(root)
        notebook.pack(expand=True, fill='both', padx=12, pady=12)

        self.frames = {
            "–û—Å–Ω–æ–≤–Ω–æ–µ": ttk.Frame(notebook, padding=10),
            "–ë–∞–Ω–∫ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã": ttk.Frame(notebook, padding=10),
            "–î–∞—Ç—ã –∏ –Ω–æ–º–µ—Ä": ttk.Frame(notebook, padding=10)
        }

        for name, frame in self.frames.items():
            notebook.add(frame, text=name)

        self.fields_main = [
            "–§–ò–û_–∏–º",
            "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
            "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π_–∞–¥—Ä–µ—Å", "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π_–∞–¥—Ä–µ—Å", "–ù–æ–º–µ—Ä_–¥–æ–≥–æ–≤–æ—Ä–∞",
            "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "–°—É–º–º–∞_–∞—Ä–µ–Ω–¥–Ω–æ–π_–ø–ª–∞—Ç—ã"
        ]
        self.fields_bank = [
            "–ò–ù–ù", "–ö–ü–ü", "–û–ö–ü–û", "–û–ì–†–ù", "–†–∞—Å—á_—Å—á–µ—Ç", "–ë–∞–Ω–∫", "–ë–ò–ö", "–∫_—Å—á–µ—Ç"
        ]
        self.fields_date = [
            "–î–∞—Ç–∞_–Ω–∞—á–∞–ª–∞_–∞—Ä–µ–Ω–¥—ã", "–î–∞—Ç–∞_–∫–æ–Ω—Ü–∞_–∞—Ä–µ–Ω–¥—ã", "–î–∞—Ç–∞"
        ]
        bank_options = ["–ü–ê–û –°–ë–ï–†–ë–ê–ù–ö", "–í–¢–ë", "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫", "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫", "–¢–∏–Ω—å–∫–æ—Ñ—Ñ"]
        person_options = ["–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä", "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç", "–î–∏—Ä–µ–∫—Ç–æ—Ä"]

        # --- –ö–û–†–û–¢–ö–ê–Ø –õ–û–ì–ò–ö–ê: –ø–æ–ª—è, –≥–¥–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ù–î–° ---
        self.nds_label = None  # –°—é–¥–∞ –±—É–¥–µ—Ç –ª–µ–π–±–ª —Å —Å—É–º–º–æ–π –ù–î–°

        for field in self.fields_main:
            if field == "–§–ò–û_–∏–º":
                self.create_row(self.frames["–û—Å–Ω–æ–≤–Ω–æ–µ"], field, "–§–ò–û")
            elif field == "–î–æ–ª–∂–Ω–æ—Å—Ç—å":
                self.create_combobox(self.frames["–û—Å–Ω–æ–≤–Ω–æ–µ"], field, person_options)
            elif field == "–°—É–º–º–∞_–∞—Ä–µ–Ω–¥–Ω–æ–π_–ø–ª–∞—Ç—ã":
                self.create_row(self.frames["–û—Å–Ω–æ–≤–Ω–æ–µ"], field)
                # –ø–æ—Å–ª–µ –ø–æ–ª—è —Å—É–º–º—ã –¥–æ–±–∞–≤–ª—è–µ–º Label –¥–ª—è –ù–î–°
                self.nds_label = ttk.Label(self.frames["–û—Å–Ω–æ–≤–Ω–æ–µ"], text="–ù–î–° (5%): 0.00", font=("Segoe UI", 10, "bold"), foreground="#225500")
                self.nds_label.pack(anchor="w", padx=10, pady=2)
                # –≤–µ—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–º–º—ã
                self.entries[field].bind("<KeyRelease>", self.update_nds)
            else:
                self.create_row(self.frames["–û—Å–Ω–æ–≤–Ω–æ–µ"], field)

        for field in self.fields_bank:
            if field == "–ë–∞–Ω–∫":
                self.create_combobox(self.frames["–ë–∞–Ω–∫ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã"], field, bank_options)
            elif field == "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è_–ø–µ—Ä—Å–æ–Ω–∞":
                self.create_combobox(self.frames["–ë–∞–Ω–∫ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã"], field, person_options)
            else:
                self.create_row(self.frames["–ë–∞–Ω–∫ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã"], field)

        for field in self.fields_date:
            if "–î–∞—Ç–∞" or "–î–∞—Ç–∞_–Ω–∞—á–∞–ª–∞_–∞—Ä–µ–Ω–¥—ã" in field:
                self.create_dateentry(self.frames["–î–∞—Ç—ã –∏ –Ω–æ–º–µ—Ä"], field)
            else:
                self.create_row(self.frames["–î–∞—Ç—ã –∏ –Ω–æ–º–µ—Ä"], field)

        button_frame = ttk.Frame(root)
        button_frame.pack(pady=15)

        ttk.Button(button_frame, text="üìÇ –í—ã–±—Ä–∞—Ç—å Excel-—Ñ–∞–π–ª", command=self.choose_file).pack(side=tk.LEFT, padx=8)
        ttk.Button(button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...", command=self.save_as).pack(side=tk.LEFT, padx=8)
        ttk.Button(button_frame, text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å Word", command=self.save_and_generate_word).pack(side=tk.LEFT, padx=8)

    def create_row(self, parent, field, label_text=None):
        frame = ttk.Frame(parent)
        frame.pack(fill='x', pady=3)
        label = ttk.Label(frame, text=label_text or field.replace("_", " "), width=40, anchor='w')
        label.pack(side='left')
        entry = ttk.Entry(frame, width=55)
        entry.pack(side='left', padx=5)
        self.entries[field] = entry

    def create_combobox(self, parent, field, options):
        frame = ttk.Frame(parent)
        frame.pack(fill='x', pady=3)
        label = ttk.Label(frame, text=field.replace("_", " "), width=25, anchor='w')
        label.pack(side='left')
        combo = ttk.Combobox(frame, values=options, width=63)
        combo.pack(side='left', padx=5)
        self.entries[field] = combo

    def create_dateentry(self, parent, field):
        frame = ttk.Frame(parent)
        frame.pack(fill='x', pady=3)
        label = ttk.Label(frame, text=field.replace("_", " "), width=25, anchor='w')
        label.pack(side='left')
        date_entry = DateEntry(frame, width=61, date_pattern="dd.mm.yyyy")
        date_entry.pack(side='left', padx=5)
        self.entries[field] = date_entry

    def choose_file(self):
        path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
        if path:
            self.excel_file = path

    def save_as(self):
        path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
        if path:
            self.excel_file = path

    def update_nds(self, event=None):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ù–î–° –ø–æ –º–µ—Ä–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∞—Ä–µ–Ω–¥—ã"""
        try:
            summa = float(self.entries["–°—É–º–º–∞_–∞—Ä–µ–Ω–¥–Ω–æ–π_–ø–ª–∞—Ç—ã"].get().replace(",", "."))
            nds = round(summa * 5 / 105, 2)
            self.nds_label.config(text=f"–ù–î–° (5%): {nds:.2f}")
        except Exception:
            self.nds_label.config(text="–ù–î–° (5%): 0.00")

    def save_and_generate_word(self):
        if not self.excel_file:
            messagebox.showwarning("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ Excel-—Ñ–∞–π–ª –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –§–ò–û
        fio_input = self.entries["–§–ò–û_–∏–º"].get()
        fio_rod, fio_short = fio_to_rod_and_short(fio_input)

        new_data = {k: v.get() for k, v in self.entries.items()}
        new_data["–ü–æ–ª–Ω–æ–µ_–∏–º—è_—Ä–æ–¥_–ø–∞–¥–µ–∂"] = fio_rod
        new_data["–°–æ–∫—Ä—â_–∏–º—è_–¥–∏—Ä"] = fio_short

        summa_str = new_data.get("–°—É–º–º–∞_–∞—Ä–µ–Ω–¥–Ω–æ–π_–ø–ª–∞—Ç—ã", "0").replace(",", ".")
        try:
            summa_float = float(summa_str)
        except Exception:
            summa_float = 0

        # --- –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ä—É–±–ª–∏ –∏ –∫–æ–ø–µ–π–∫–∏ ---
        rub, sep, kop = summa_str.partition(".")
        if not sep:
            rub, kop = rub, "00"
        else:
            kop = (kop + "00")[:2]

        new_data["–°—É–º–º–∞_–∞—Ä–µ–Ω–¥–Ω–æ–π_–ø–ª–∞—Ç—ã_—Ä—É–±"] = rub
        new_data["–°—É–º–º–∞_–∞—Ä–µ–Ω–¥–Ω–æ–π_–ø–ª–∞—Ç—ã_–∫–æ–ø"] = kop


        # --- –†–ê–°–°–ß–ò–¢–´–í–ê–ï–ú –ù–î–° –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ---
        try:
            summa = float(new_data.get("–°—É–º–º–∞_–∞—Ä–µ–Ω–¥–Ω–æ–π_–ø–ª–∞—Ç—ã", "0").replace(",", "."))
        except Exception:
            summa = 0
        nds = round(summa * 5 / 105, 2)
        new_data["–ù–î–°"] = f"{nds:.2f}"

        new_row = pd.DataFrame([new_data])

        if os.path.exists(self.excel_file):
            try:
                df = pd.read_excel(self.excel_file)
                df = pd.concat([df, new_row], ignore_index=True)
            except:
                df = new_row
        else:
            df = new_row

        try:
            df.to_excel(self.excel_file, index=False)
        except PermissionError:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –∑–∞–Ω—è—Ç ‚Äî –∑–∞–∫—Ä–æ–π –µ–≥–æ –≤ Excel:\n{self.excel_file}")
            return

        if os.path.exists(self.word_template):
            doc = Document(self.word_template)
            for p in doc.paragraphs:
                for run in p.runs:
                    for key, val in new_data.items():
                        if f"{{{{{key}}}}}" in run.text:
                            run.text = run.text.replace(f"{{{{{key}}}}}", val)
            for table in doc.tables:
                for row in table.rows:
                    for cell in row.cells:
                        for p in cell.paragraphs:
                            for run in p.runs:
                                for key, val in new_data.items():
                                    if f"{{{{{key}}}}}" in run.text:
                                        run.text = run.text.replace(f"{{{{{key}}}}}", val)
            word_output = self.excel_file.replace(".xlsx", "_–¥–æ–∫—É–º–µ–Ω—Ç.docx")
            doc.save(word_output)
            os.startfile(word_output)

        for entry in self.entries.values():
            entry.delete(0, tk.END)
        # –û–±–Ω–æ–≤–∏—Ç—å –ù–î–° –≤–Ω–∏–∑—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        self.update_nds()


